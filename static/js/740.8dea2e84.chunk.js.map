{"version":3,"file":"static/js/740.8dea2e84.chunk.js","mappings":"4TAMO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,IAAAA,IAAU,sBAD9B,cACGC,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAsCC,EAAtC,+BAA8C,GAA9C,SACoBJ,IAAAA,IAAA,6BAAgCI,IADpD,cACGH,EADH,yBAEIA,EAASC,KAAKG,SAFlB,mEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACoBP,IAAAA,IAAA,iBAAoBO,IADxC,cACGN,EADH,yBAEIA,EAASC,MAFb,kEAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACoBT,IAAAA,IAAA,gBAAmBS,EAAnB,aADpB,cACGR,EADH,yBAEIA,EAASC,MAFb,kEAMA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,uFACoBT,IAAAA,IAAA,gBAAmBS,EAAnB,aADpB,cACGR,EADH,yBAEIA,EAASC,MAFb,kEAzBPF,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CAAEW,QAFd,mC,uICACC,EAAQC,EAAAA,GAAAA,GAAH,yHAOLC,EAAOD,EAAAA,GAAAA,GAAH,qIAQJE,EAAQF,EAAAA,GAAAA,EAAH,gD,SCUlB,EAxBa,WACX,IAAMG,ECCoB,WACxB,IAAQT,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAwBW,EAAAA,EAAAA,UAAS,IAAjC,eAAOF,EAAP,KAAaG,EAAb,KAKA,OAHAC,EAAAA,EAAAA,YAAU,YACNZ,EAAAA,EAAAA,IAAeD,GAASc,KAAKF,EAChC,GAAC,CAACZ,IACIS,CACV,CDTcM,GAEb,OACE,8BACGN,IACC,+BACE,SAACJ,EAAD,UACGI,EAAKA,KAAKO,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACrC,OACE,UAACb,EAAD,YACI,gBAAKc,IAAG,8DAAyDD,GAAgBE,IAAKJ,KACxF,SAACV,EAAD,UAAQU,KACR,uBAAIC,MAHKF,EAMd,SAMZ,C","sources":["components/services/API.js","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","components/hooks/useFetchCast.js"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = '007a4826f670f8c4fc5714195603888e'\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/'\naxios.defaults.params = { api_key: KEY};\n\nexport async function fetchGetTrendMovies() {\n    const response = await axios.get('trending/movie/day')\n    return response.data\n}\n\nexport async function fetchSearchMovieByWord(query = '') {\n    const response = await axios.get(`search/movie?query=${query}`);\n    return response.data.results;\n  }\n\nexport async function fetchMovieById(movieId) {\n    const response = await axios.get(`/movie/${movieId}`)\n    return response.data\n}\n\n\nexport async function fetchMovieCast(movie_id) {\n    const response = await axios.get(`movie/${movie_id}/credits`)\n    return response.data\n}\n\n\nexport async function fetchMovieReviews(movie_id) {\n    const response = await axios.get(`movie/${movie_id}/reviews`)\n    return response.data\n}\n\n\n\n\n","import styled from 'styled-components';\n\nexport const Casts = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 30px;\n`;\n\nexport const Item = styled.li`\n  margin: 10px;\n  width: 140px;\n  display: flex;\n  flex-direction: column;\n  align-items: space-around;\n`;\n\nexport const Actor = styled.b`\n  margin-bottom: 10px;\n`;\n","import { useFetchCast } from 'components/hooks/useFetchCast';\nimport { Casts, Item, Actor } from './Cast.styled';\n\nconst Cast = () => {\n  const cast = useFetchCast();\n\n  return (\n    <>\n      {cast && (\n        <>\n          <Casts>\n            {cast.cast.map(({ id, name, character, profile_path }) => {\n              return (\n                <Item key={id}>\n                    <img src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${profile_path}`} alt={name}/>\n                  <Actor>{name}</Actor>\n                  <p>{character}</p>\n                </Item>\n              );\n            })}\n          </Casts>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast\n","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { fetchMovieCast } from \"components/services/API\"\n\n\nexport const useFetchCast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState('');\n\n    useEffect(() => {\n        fetchMovieCast(movieId).then(setCast)\n    },[movieId])\n    return cast\n}"],"names":["fetchGetTrendMovies","axios","response","data","fetchSearchMovieByWord","query","results","fetchMovieById","movieId","fetchMovieCast","movie_id","fetchMovieReviews","api_key","Casts","styled","Item","Actor","cast","useParams","useState","setCast","useEffect","then","useFetchCast","map","id","name","character","profile_path","src","alt"],"sourceRoot":""}